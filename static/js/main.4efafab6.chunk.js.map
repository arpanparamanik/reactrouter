{"version":3,"sources":["Components/Menu.js","Components/About.js","Components/ContactForm.js","Components/Contact.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Menu","params","className","to","About","ContactForm","props","handleAll","event","setState","target","name","value","handleSubmit","alert","state","Name","Email","Mobile","Message","JSON","stringify","preventDefault","onSubmit","this","type","onChange","Component","Contact","Footer","Home","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+TAmBeA,EAbF,SAACC,GACV,OACI,yBAAKC,UAAU,aACX,4BACI,4BAAI,kBAAC,IAAD,CAAMC,GAAK,KAAX,WACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAK,UAAX,YACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAK,YAAX,iBCCLC,EATD,SAACH,GACX,OACI,yBAAKC,UAAU,cACX,0D,wCCJSG,G,wDAEjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAuBVC,UAAY,SAACC,GACT,EAAKC,SAAL,eACKD,EAAME,OAAOC,KAAQH,EAAME,OAAOE,SA1BxB,EA8BnBC,aAAe,SAACL,GACZM,MAAK,qBAAgB,EAAKC,MAAMC,KAA3B,sCACY,EAAKD,MAAME,MADvB,yCAEiB,EAAKF,MAAMG,OAF5B,oDAG2B,EAAKH,MAAMI,QAHtC,eAKLL,MAAMM,KAAKC,UAAU,EAAKN,QAC1BP,EAAMc,kBAlCN,EAAKP,MAAQ,CACRC,KAAM,GACNC,MAAO,GACPC,OAAQ,GACRC,QAAS,IAPC,E,qDAyCf,OACI,6BACI,0BAAMI,SAAUC,KAAKX,cACjB,wCADJ,IACyB,6BACrB,2BAAOY,KAAK,OAAOd,KAAK,OAAOC,MAAOY,KAAKT,MAAMC,KAAMU,SAAUF,KAAKjB,YAF1E,IAEuF,6BAEnF,yCAJJ,IAI0B,6BACtB,2BAAOkB,KAAK,QAAQd,KAAK,QAAQC,MAAOY,KAAKT,MAAME,MAAOS,SAAUF,KAAKjB,YAL7E,IAK0F,6BAEtF,6CAPJ,IAO8B,6BAC1B,2BAAOkB,KAAK,SAASd,KAAK,SAASC,MAAOY,KAAKT,MAAMG,OAAQQ,SAAUF,KAAKjB,YARhF,IAQ6F,6BAEzF,2CAVJ,IAU4B,6BACxB,8BAAUI,KAAK,UAAUC,MAAOY,KAAKT,MAAMI,QAASO,SAAUF,KAAKjB,YAXvE,IAWoF,6BAEhF,2BAAOkB,KAAK,SAASb,MAAM,e,GA1DNe,cCgB1BC,EAdC,SAAC3B,GACb,OACI,yBAAKC,UAAU,gBACX,0DACA,6BAAK,6BACL,6BACI,6BACA,kBAAC,EAAD,S,OCAD2B,G,MARA,SAAC5B,GACZ,OACI,yBAAKC,UAAU,eACX,6ECuBZ,IAAM4B,EAAO,SAAC7B,GACZ,OACI,yBAAKC,UAAU,aACX,4BACI,0DAMC6B,EA5Bf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWJ,IACjC,kBAAC,IAAD,CAAOE,KAAK,QAAQC,OAAK,EAACC,UAAWJ,IACrC,kBAAC,IAAD,CAAOE,KAAK,SAASE,UAAW9B,IAChC,kBAAC,IAAD,CAAO4B,KAAK,WAAWE,UAAWN,KAEpC,kBAAC,EAAD,SCXYO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4efafab6.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../Css/Menu.css'\r\nimport '../Css/Pages.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nconst Menu = (params) => {\r\n    return(\r\n        <div className=\"menuStyle\">\r\n            <ul>\r\n                <li><Link to = \"/\"> Home </Link></li>\r\n                <li><Link to = \"/about\"> About </Link></li>\r\n                <li><Link to = \"/contact\"> Contact </Link></li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Menu","import React from 'react'\r\nimport '../Css/Pages.css'\r\n\r\n\r\nconst About = (params) => {\r\n    return(\r\n        <div className=\"aboutStyle\">\r\n            <h2>Welcome to About Page...</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default About;","import React, { Component } from 'react'\r\nimport '../Css/ContactForm.css'\r\n\r\nexport default class ContactForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             Name: \"\",\r\n             Email: \"\",\r\n             Mobile: \"\",\r\n             Message: \"\"\r\n        }\r\n    }\r\n    \r\n    // handleName = (event) => {  \r\n    //     this.setState({ Name: event.target.value })\r\n    // }\r\n    // handleEmail = (event) => {  \r\n    //     this.setState({ Email: event.target.value })\r\n    // }\r\n    // handleMobile = (event) => {  \r\n    //     this.setState({ Mobile: event.target.value })\r\n    // }\r\n    // handleMessage = (event) => {  \r\n    //     this.setState({ Message: event.target.value })\r\n    // }\r\n\r\n    handleAll = (event) => {\r\n        this.setState({\r\n            [event.target.name] : event.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        alert (`my name is ${this.state.Name}. \r\n        My email id is ${this.state.Email}\r\n        My mobile number is ${this.state.Mobile}.\r\n        My message to your company is ${this.state.Message}\r\n        `);\r\n        alert(JSON.stringify(this.state));\r\n        event.preventDefault();\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <lable>Name:</lable> <br/>\r\n                    <input type=\"text\" name=\"Name\" value={this.state.Name} onChange={this.handleAll}/> <br/>\r\n\r\n                    <lable>Email:</lable> <br/>\r\n                    <input type=\"email\" name=\"Email\" value={this.state.Email} onChange={this.handleAll}/> <br/>\r\n\r\n                    <lable>Mobile No:</lable> <br/>\r\n                    <input type=\"number\" name=\"Mobile\" value={this.state.Mobile} onChange={this.handleAll}/> <br/>\r\n\r\n                    <lable>Message:</lable> <br/>\r\n                    <textarea name=\"Message\" value={this.state.Message} onChange={this.handleAll}/> <br/>\r\n\r\n                    <input type=\"submit\" value=\"Send\" />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport '../Css/Pages.css'\r\nimport ContactForm from './ContactForm'\r\n\r\n\r\nconst Contact = (params) => {\r\n    return(\r\n        <div className=\"contactStyle\">\r\n            <h2>Welcome to Contact Page...</h2>\r\n            <br/><br/>\r\n            <div>\r\n                <br/>\r\n                <ContactForm/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Contact;","import React from 'react'\r\nimport '../Css/Footer.css'\r\n\r\n\r\nconst Footer = (params) => {\r\n    return(\r\n        <div className=\"footerStyle\">\r\n            <h2>Developed and designer by: Arpan Paramanik</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import React from 'react';\nimport Menu from './Components/Menu';\nimport About from './Components/About';\nimport Contact from './Components/Contact';\n//import {BrowserRouter as router, Route} from 'react-router-dom'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport Footer from './Components/Footer';\n \n// import logo from './logo.svg';\n// import './App.css';\n\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Menu/>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/Home\" exact component={Home} />\n          <Route path=\"/About\" component={About} />\n          <Route path=\"/Contact\" component={Contact} />\n        </Switch>\n        <Footer/>\n      </div>\n    </Router>\n    \n  );\n}\n\nconst Home = (params) => {\n  return(\n      <div className=\"homeStyle\">\n          <ul>\n              <h2>Welcome to Home Page...</h2>\n          </ul>\n      </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}